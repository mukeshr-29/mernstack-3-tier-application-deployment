pipeline{
    agent any
    tools {
        nodejs 'node'
    }
    environment{
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('account_id')
        AWS_ECR_REPO_NAME = credentials('ecr_repo1')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    } 
    stages{
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('git checkout'){
            steps{
                git branch: 'main', url: 'https://github.com/mukeshr-29/mernstack-3-tier-application-deployment.git'
            }
        }
        stage('install dependencies'){
            steps{
                dir('Application-Code/frontend'){
                    sh 'npm install'
                }
            }
        }
        stage('trivy file scanning'){
            steps{
                dir('Application-Code/frontend'){
                    sh 'trivy fs --format table -o trivyfsfn.html .'
                }
            }
        }
        stage('sonarqube analysis'){
            steps{
                script{
                    dir('Application-Code/frontend'){
                        withSonarQubeEnv('sonar-server'){
                            sh '''
                                $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=frontend \
                                    -Dsonar.projectKey=frontend                        
                            '''
                        }
                    }
                }
            }
        }
        stage('quality gate'){
            steps{
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('owasp check'){
            steps{
                dir('Application-Code/frontend'){
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dp-check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }    
        }
        stage('build docker image'){
            steps{
                script{
                    dir('Application-Code/frontend'){
                        sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage('image tag'){
            steps{
                sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
            }
        }
        stage('image scan using trivy'){
            steps{
                sh 'trivy image --format table -o trivyimg1.html ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
            }
        }
        stage('image push to ecr'){
            steps{
                script{
                    sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URL}'
                    sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
    }  
}